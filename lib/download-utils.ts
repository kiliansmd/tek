export interface DownloadData {
  scoringResults: any
  resumeData: any
  jobData: any
  files: {
    cvName: string
    jobName: string
  }
}

export function downloadJSON(data: any, filename: string) {
  const dataStr = JSON.stringify(data, null, 2)
  const dataUri = "data:application/json;charset=utf-8," + encodeURIComponent(dataStr)

  const linkElement = document.createElement("a")
  linkElement.setAttribute("href", dataUri)
  linkElement.setAttribute("download", filename)
  linkElement.click()
}

export function downloadCSV(data: DownloadData) {
  const { scoringResults, resumeData, jobData, files } = data

  // Create CSV content
  const csvRows = []

  // Headers
  csvRows.push(["Metric", "Value", "Description"])

  // Overall score
  csvRows.push([
    "Overall Match Score",
    `${Math.round(scoringResults.SuggestedScore * 100)}%`,
    "Overall compatibility between CV and job requirements",
  ])

  // Detailed breakdown
  if (scoringResults.ApplicantScoreBreakdown) {
    Object.entries(scoringResults.ApplicantScoreBreakdown).forEach(([category, score]: [string, any]) => {
      csvRows.push([`${category} Score`, `${Math.round(score * 100)}%`, `Match score for ${category.toLowerCase()}`])
    })
  }

  // File information
  csvRows.push(["CV File", files.cvName, "Original CV filename"])

  csvRows.push(["Job File", files.jobName, "Original job description filename"])

  // Candidate info
  const contact = resumeData.ResumeData?.ContactInformation
  if (contact?.CandidateName?.FormattedName) {
    csvRows.push(["Candidate Name", contact.CandidateName.FormattedName, "Candidate's full name"])
  }

  if (contact?.EmailAddresses?.[0]?.InternetEmailAddress) {
    csvRows.push(["Candidate Email", contact.EmailAddresses[0].InternetEmailAddress, "Candidate's email address"])
  }

  // Job info
  const jobTitle = jobData.JobData?.JobTitles?.[0]?.Name
  if (jobTitle) {
    csvRows.push(["Job Title", jobTitle, "Position title"])
  }

  // Convert to CSV string
  const csvContent = csvRows.map((row) => row.map((field) => `"${field}"`).join(",")).join("\n")

  // Download
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
  const link = document.createElement("a")
  const url = URL.createObjectURL(blob)
  link.setAttribute("href", url)
  link.setAttribute("download", `cv-scoring-summary-${new Date().toISOString().split("T")[0]}.csv`)
  link.click()
  URL.revokeObjectURL(url)
}

export function downloadSummaryReport(data: DownloadData) {
  const { scoringResults, resumeData, jobData, files } = data

  const overallScore = Math.round(scoringResults.SuggestedScore * 100)
  const contact = resumeData.ResumeData?.ContactInformation
  const jobTitle = jobData.JobData?.JobTitles?.[0]?.Name

  const reportContent = `
CV-JOB MATCHING ANALYSIS REPORT
===============================

Generated: ${new Date().toLocaleString()}

OVERALL MATCH SCORE: ${overallScore}%
${
  overallScore >= 80
    ? "RECOMMENDATION: Excellent Match - Priority Interview"
    : overallScore >= 60
      ? "RECOMMENDATION: Good Match - Consider for Interview"
      : "RECOMMENDATION: Poor Match - May not be suitable"
}

FILES ANALYZED:
- CV: ${files.cvName}
- Job Description: ${files.jobName}

CANDIDATE INFORMATION:
- Name: ${contact?.CandidateName?.FormattedName || "N/A"}
- Email: ${contact?.EmailAddresses?.[0]?.InternetEmailAddress || "N/A"}
- Phone: ${contact?.Telephones?.[0]?.Raw || "N/A"}

JOB INFORMATION:
- Position: ${jobTitle || "N/A"}
- Company: ${jobData.JobData?.EmployerNames?.[0]?.Name || "N/A"}
- Location: ${jobData.JobData?.JobLocations?.[0]?.Municipality || "N/A"}

DETAILED SCORE BREAKDOWN:
${
  scoringResults.ApplicantScoreBreakdown
    ? Object.entries(scoringResults.ApplicantScoreBreakdown)
        .map(([category, score]: [string, any]) => `- ${category}: ${Math.round(score * 100)}%`)
        .join("\n")
    : "No detailed breakdown available"
}

ANALYSIS SUMMARY:
This report was generated using Textkernel's AI-powered CV parsing and job matching technology.
The scores represent the compatibility between the candidate's qualifications and the job requirements.

For technical details and complete data, please refer to the JSON export files.

===============================
Report generated by CV-Job Scoring System
  `.trim()

  const blob = new Blob([reportContent], { type: "text/plain;charset=utf-8;" })
  const link = document.createElement("a")
  const url = URL.createObjectURL(blob)
  link.setAttribute("href", url)
  link.setAttribute("download", `cv-scoring-report-${new Date().toISOString().split("T")[0]}.txt`)
  link.click()
  URL.revokeObjectURL(url)
}
